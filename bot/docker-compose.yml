version: "3.9"

volumes:
  logs_volume: {}
  loki_stora_data: {}
  postgres_data: {}

services:
  telegram-bot:
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_HOST: ${DB_HOST}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      BOT_TOKEN: ${BOT_TOKEN}
      BOT_NAME: ${BOT_NAME}
    build:
      context: ./app
    #env_file:
    #  - ./app/.env
    volumes:
      - logs_volume:/app/logs

  # http://loki-local:3100
  loki-local:
    image: grafana/loki:2.7.0
    volumes:
      - loki_stora_data:/loki

  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - loki-local
    env_file:
      - ./grafana/.env

  promtail:
    image: grafana/promtail:2.9.3
    volumes:
      - logs_volume:/logs
      - ./promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki-local

  liquibase:
    depends_on:
      postgres:
        condition: service_healthy
    build: ./liquibase
    command: [
      "--changeLogFile=initial.postgres.yaml",
      "--url=jdbc:postgresql://${DB_HOST}:${DB_INTERNAL_PORT}/${POSTGRES_DB}",
      "update"
    ]
    environment:
      LIQUIBASE_COMMAND_USERNAME: ${POSTGRES_USER}
      LIQUIBASE_COMMAND_PASSWORD: ${POSTGRES_PASSWORD}

  postgres:
    image: postgres:16.3
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - "${DB_EXTERNAL_PORT}:${DB_INTERNAL_PORT}"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  user-management:
      build:
        context: ./user_manager
      env_file:
        - ./user_manager/.env
      environment:
        FLASK_APP: manager.py
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
        DB_HOST: ${DB_HOST}
      ports:
        - "5005:5000"
      depends_on:
        - postgres
  
  picture-uploader:
    build:
      context: ./picture_uploader
    env_file:
      - ./picture_uploader/.env
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
    ports:
      - "5001:5001"