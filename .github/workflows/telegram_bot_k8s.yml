name: Telegram Bot CI

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    paths:
      - 'bot/**'

env:
  PROJECT_NAME: danilevich_gpt_bot

jobs:
  pylint_app:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: [src/collection_of_info.py, src/commands.py, src/decorators.py, src/gpt_handler.py, src/general_src.py, gpt_bot]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
        working-directory: ./bot/app

      - name: Analysing app code with pylint
        run: |
          pylint ${{ matrix.file }}
        working-directory: ./bot/app
        continue-on-error: true

  pylint_manager:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
        working-directory: ./bot/user_manager
      
      - name: Analysing user_manager with pylint
        run: |
          pylint manager.py
        working-directory: ./bot/user_manager

  build_and_push:
   # needs:
   #   - pylint
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir:
          - app
          - liquibase
    steps:
      - uses: actions/checkout@v4

      - name: Build image
        working-directory: ./bot/${{ matrix.dir }}
        run: docker build . --file Dockerfile --tag $PROJECT_NAME

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}-${{ matrix.dir }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $PROJECT_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION