name: Telegram Bot CI/CD

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    paths:
      - 'bot/**'
      - '.github/workflows/telegram_bot_k8s.yml'

env:
  PROJECT_NAME: danilevich_gpt_bot
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  pylint_app:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file: [src/collection_of_info.py, src/commands.py, src/decorators.py, src/gpt_handler.py, src/general_src.py, gpt_bot]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
        working-directory: ./bot/app

      - name: Analysing app code with pylint
        run: |
          pylint ${{ matrix.file }}
        working-directory: ./bot/app
        continue-on-error: true

  pylint_manager:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
        working-directory: ./bot/user_manager
      
      - name: Analysing user_manager with pylint
        run: |
          pylint manager.py
        working-directory: ./bot/user_manager

  build_and_push:
    outputs:
      new_tag_liquibase: ${{ steps.push_image.outputs.new_tag_liquibase }}
      new_tag_telegram_bot: ${{ steps.push_image.outputs.new_tag_telegram_bot }}
      new_tag_manager: ${{ steps.push_image.outputs.new_tag_manager }}
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir:
          - app
          - liquibase
          - user_manager
          - picture_uploader
    steps:
      - uses: actions/checkout@v4

      - name: Build image
        working-directory: ./bot/${{ matrix.dir }}
        run: docker build . --file Dockerfile --tag $PROJECT_NAME

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/imosia/${{ env.PROJECT_NAME }}_${{ matrix.dir }}
          CURRENT_BRANCH=${{ github.head_ref || github.ref_name }} 
          if [ "$CURRENT_BRANCH" == "main" ]; then
            TAG=latest
          else
            TAG="$CURRENT_BRANCH"
          fi
          docker tag $PROJECT_NAME $IMAGE_ID:$TAG
          docker push $IMAGE_ID:$TAG
          echo "new_tag_${{ matrix.dir }}=$TAG" >> $GITHUB_OUTPUT
        id: push_image

  deploybot:
    runs-on: ubuntu-latest
    needs:
      - build_and_push
    steps:
      - uses: actions/checkout@v4

      - name: EKS login
        run: |
          aws eks \
          --region ${{ vars.AWS_REGION }} \
          update-kubeconfig \
          --name ${{ vars.EKS_NAME }}

      - uses: azure/setup-helm@v4.2.0

      - name: helm upgrade --install
        run: |
          helm \
          upgrade --install \
          --namespace ${{ vars.KUBE_NS }} \
          --create-namespace \
          telegram-bot \
          --set image_bot.tag=${{ needs.build_and_push.outputs.new_tag_telegram_bot }} \
          --set image_liquibase.tag=${{ needs.build_and_push.outputs.new_tag_liquibase }} \
          --wait \
          bot/telegram-bot
        working-directory: bot/charts

  deploy_manager:
    runs-on: ubuntu-latest
    needs:
      - build_and_push
    steps:
      - uses: actions/checkout@v4

      - name: EKS login
        run: |
          aws eks \
          --region ${{ vars.AWS_REGION }} \
          update-kubeconfig \
          --name ${{ vars.EKS_NAME }}

      - uses: azure/setup-helm@v4.2.0

      - name: helm upgrade --install
        run: |
          helm \
          upgrade --install \
          --namespace ${{ vars.KUBE_NS }} \
          --create-namespace \
          user-manager \
          --set image.tag=${{ needs.build_and_push.outputs.new_tag_manager }} \
          --wait \
          bot/user-manager
        working-directory: bot/charts